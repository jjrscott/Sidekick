#!/usr/bin/perl

# MIT License
# 
# Copyright (c) 2018 John Scott
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

use strict;
use Data::Dumper;
use Getopt::Long;
use File::Slurp;

my $scheme;
my $productVersion;
my $productBuild;
my $username;
my $password;

GetOptions
(
	"scheme=s" => \$scheme,
	"product-version=s" => \$productVersion,
	"product-build=s" => \$productBuild,
	"username=s" => \$username,
	"password=s" => \$password,
);

if (!length $scheme || !defined $productVersion)
{
	die "Usage example: build_scheme -scheme KT -product-version 1.0.0 -product-build 10\n";
}

if (!defined $productBuild)
{
	$productBuild = 0;

	foreach my $tag (qx(git tag -l 'build-*'), qx(git tag -l 'build/*'))
	{
		chomp $tag;
		$tag =~ s/build[-\/]//;
		$productBuild = $tag if ($productBuild < $tag);
	}

	$productBuild += 1;
}

# die $productBuild;

my $currentDate=`date "+%Y-%m-%d-%H%M%S"`;
chomp $currentDate;

{
	my $exportPath = "$ENV{HOME}/Downloads/${scheme}_${productVersion}_${productBuild}_${currentDate}";
	my $archivePath="${exportPath}/Archive.xcarchive";
	my $derivedDataPath="${exportPath}/Build";
	my $exportOptionsPlist = "${exportPath}/ExportOptions.plist";
	
	my $altoolPath = qx(xcode-select -p);
	$altoolPath =~ s/\n//;
	$altoolPath .= "/../Applications/Application Loader.app/Contents/Frameworks/ITunesSoftwareService.framework/Versions/A/Support/altool";
	$altoolPath = quotemeta $altoolPath;

	my $buildSettings = qx(xcodebuild -scheme ${scheme} -showBuildSettings);
	
	my %buildSettings = $buildSettings =~ /([A-Z_]+) = ([^\n]+)/g;
		
	my $developmentTeam = $buildSettings{'DEVELOPMENT_TEAM'};
	
# 	$developmentTeam ||= "J9LKFEJ8GD";
	
	die "You need to set a development team\n" if 0 == length $developmentTeam;

	system "xcodebuild", "archive",
			"-allowProvisioningUpdates",
			"-scheme", $scheme,
			"-archivePath", $archivePath,
			"-derivedDataPath", $derivedDataPath,
			"PRODUCT_VERSION=${productVersion}",
			"PRODUCT_VERSION=${productVersion}",
			"PRODUCT_BUILD=${productBuild}";
			
	my $gitCommit = qx(git rev-parse --verify HEAD);
	
	$gitCommit =~ s/[^a-f0-9]//g;
	
	my $ipaName = $scheme."_".substr(uc $gitCommit, 0, 8);
	
	system "defaults", "write", $archivePath."/Info.plist", "Name", $ipaName;
	
	my $exportOptions = join "", <DATA>;
	$exportOptions =~ s/DEVELOPMENT_TEAM/$developmentTeam/;
	
	write_file($exportOptionsPlist, $exportOptions);
				
	system "xcodebuild", "-exportArchive",
		"-archivePath", $archivePath,
		"-exportPath", $exportPath,
		"-exportOptionsPlist", $exportOptionsPlist,
		"-allowProvisioningUpdates";
		
	my $ipaPath = "${exportPath}/${ipaName}.ipa";

	warn "Upload app";
		
	my $command = join " ", $altoolPath, '--file',  $ipaPath, 
		'--type',  'ios',
		'--upload-app',
		'--password', $password,
		'--username',  $username,
		'--output-format', 'xml';
		
	my $uploadResult = qx($command);
	
	print $uploadResult;
	
	if ($uploadResult =~ m!<key>success-message</key>!)
	{
		my $tag = "build/".$productBuild;
		system "git", "tag", "-a", $tag, "-m", "";
	}
		
	warn "Uploaded app";
}

__DATA__
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>method</key>
    <string>app-store</string>
    <key>teamID</key>
    <string>DEVELOPMENT_TEAM</string>
    <key>uploadBitcode</key>
    <false/>
    <key>uploadSymbols</key>
    <true/>
  </dict>
</plist>
